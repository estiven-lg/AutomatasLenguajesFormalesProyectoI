/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.umg.proyectoial.screens;

import Services.DatabaseConnection;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author keila
 */
public class MainScreen extends javax.swing.JPanel {

    /**
     * Creates new form MainScreen2
     */
    public MainScreen() {
        initComponents();
        this.txt_codigo.setText("""
                                $sueldo = 2500;
                                $bono = 1000;
                                $gastos=1200;
                                $impuestos=500;
                                $ingresos = $bono + $sueldo;
                                $egresos =  $gastos + $impuestos;
                                $total= $ingresos-impuestos;
                                $casa = $total /2;""");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_validar = new javax.swing.JButton();
        txt_lexema = new java.awt.TextArea();
        lbl = new java.awt.Label();
        lblConfirmacion = new javax.swing.JLabel();
        lbl_lexema = new java.awt.Label();
        txt_codigo = new java.awt.TextArea();

        btn_validar.setText("Validar");
        btn_validar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_validarActionPerformed(evt);
            }
        });

        txt_lexema.setVisible(false);

        lbl.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl.setText("Ingresar texto");

        lbl_lexema.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_lexema.setText("Lexemas");
        lbl_lexema.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_lexema, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_lexema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_validar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblConfirmacion, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addComponent(txt_codigo, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_validar))
                .addGap(151, 151, 151)
                .addComponent(lblConfirmacion)
                .addGap(12, 12, 12)
                .addComponent(lbl_lexema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addComponent(txt_lexema, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(58, 58, 58)
                    .addComponent(txt_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(270, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_validarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_validarActionPerformed
        String query = " select lexeme,type from symbolsTable ";
        try {
            ResultSet rs = DatabaseConnection.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            String lexema = "";
            // Crear una lista para almacenar las filas (cada fila será un arreglo)
            ArrayList<Object[]> rows = new ArrayList<>();

            // Iterar sobre cada fila
            while (rs.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                rows.add(row);
            }
            // Convertir la lista a un arreglo (si es necesario)
            Object[][] data = rows.toArray(new Object[rows.size()][]);

            String texto = txt_codigo.getText();
            texto = texto.trim();
            texto = texto.replaceAll("\\s", "");
            char[] caracteres = texto.toCharArray();

            boolean isValido = false;
            String valorAnt = "";
            String lex = "";
            String lexAnt = "";
            String caracterAnt = "";
            int i = 0;

            while (i < caracteres.length) {
                isValido = false;

                for (Object[] row : data) {
                    String caracter = Character.toString(caracteres[i]);
                    String validar = String.valueOf(row[0]);

                    if (caracter.equals(validar)) {
                        isValido = true;
                            lex = String.valueOf(row[1]);
                            valorAnt = caracter;
                            lexema += "(" + lex + " , " + caracter + "), \n";

                        break;
                    }
                }

                if (isValido == false) {
                    break;
                }
                i++;
            }

            if (isValido == false) {
                lblConfirmacion.setText("Sintaxis incorrecta: Carácter no aceptado");
                lblConfirmacion.setForeground(Color.RED);
                lbl_lexema.setVisible(false);
                txt_lexema.setVisible(false);
            } else {
                String[] cadenas = texto.split("(?<=;)");
                for (String cadena : cadenas) {
                    isValido = false;
                    isValido = validarCadena(cadena);

                    if (isValido == false) {
                        break;
                    }
                }

                if (isValido) {
                    lblConfirmacion.setText("Sintaxis Correcta!!");
                    lblConfirmacion.setForeground(Color.GREEN);
                    lbl_lexema.setVisible(true);
                    txt_lexema.setVisible(true);
                    txt_lexema.setText(lexema);
                } else {
                    lblConfirmacion.setText("Sintaxis incorrecta: Cadena incorrecta");
                    lblConfirmacion.setForeground(Color.RED);
                    lbl_lexema.setVisible(false);
                    txt_lexema.setVisible(false);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btn_validarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_validar;
    private java.awt.Label lbl;
    private javax.swing.JLabel lblConfirmacion;
    private java.awt.Label lbl_lexema;
    private java.awt.TextArea txt_codigo;
    private java.awt.TextArea txt_lexema;
    // End of variables declaration//GEN-END:variables

    public static boolean esLetra(char c) {
        return Character.isLetter(c);
    }

    // Función para verificar si es un dígito [0-9]
    public static boolean esDigito(char c) {
        return Character.isDigit(c);
    }

    // Función para verificar si es una operación [+ - * /]
    public static boolean esOperacion(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }

    // Función para verificar si es un símbolo de asignación '='
    public static boolean esAsignacion(char c) {
        return c == '=';
    }

    // Función para verificar si es un símbolo de finalización ';'
    public static boolean esFinalizacion(char c) {
        return c == ';';
    }

    // Función para verificar si es una comilla doble "
    public static boolean esComillaDoble(char c) {
        return c == '"';
    }

    // Función para verificar si es el símbolo de variable $
    public static boolean esSimboloVariable(char c) {
        return c == '$';
    }

    enum Estado {
        INICIAL, VARIABLE, DECLARACION, OPERACION, ASIGNACION, VALOR, FINALIZACION, COMILLAS, VALOR_LITERAL, COMILLA_CIERRE
    }

    public static boolean validarCadena(String cadena) {
        Estado estadoActual = Estado.INICIAL;

        for (int i = 0; i < cadena.length(); i++) {
            char c = cadena.charAt(i);

            switch (estadoActual) {
                case INICIAL:
                    if (esSimboloVariable(c)) {
                        estadoActual = Estado.VARIABLE; // Si empieza con $, pasa al estado VARIABLE
                    } else {
                        return false; // Si no empieza con $, no es válido
                    }
                    break;

                case VARIABLE:
                    if (esLetra(c)) {
                        estadoActual = Estado.DECLARACION; // Después de $, se espera una letra
                    } else {
                        return false;
                    }
                    break;

                case DECLARACION:
                    if (esLetra(c)) {
                        estadoActual = Estado.DECLARACION; // Sigue en declaración
                    } else if (esDigito(c)) {
                        estadoActual = Estado.DECLARACION; // Sigue en declaración
                    } else if (esOperacion(c)) {
                        estadoActual = Estado.OPERACION; // Pasa a operación
                    } else if (esAsignacion(c)) {
                        estadoActual = Estado.ASIGNACION; // Pasa a estado de asignación
                    } else if (esFinalizacion(c)) {
                        estadoActual = Estado.FINALIZACION; // Finaliza correctamente
                    } else {
                        return false;
                    }
                    break;

                case ASIGNACION:
                    if (esDigito(c)) {
                        estadoActual = Estado.VALOR; // Pasa a estado de valor
                    } else if (esComillaDoble(c)) {
                        estadoActual = Estado.VALOR_LITERAL; // Pasa a estado de valor
                    } else if (esSimboloVariable(c)) {
                        estadoActual = Estado.VARIABLE; // Si empieza con $, pasa al estado VARIABLE
                    } else {
                        return false;
                    }
                    break;

                case VALOR:
                    if (esDigito(c)) {
                        estadoActual = Estado.VALOR; // Sigue en valor
                    } else if (esOperacion(c)) {
                        estadoActual = Estado.OPERACION; // Pasa a operación
                    } else if (esFinalizacion(c)) {
                        estadoActual = Estado.FINALIZACION; // Finaliza correctamente
                    } else {
                        return false;
                    }
                    break;

                case VALOR_LITERAL:
                    if (esDigito(c)) {
                        estadoActual = Estado.VALOR_LITERAL; // Sigue en valor
                    } else if (esLetra(c)) {
                        estadoActual = Estado.VALOR_LITERAL; // Sigue en declaración
                    } else if (esComillaDoble(c)) {
                        estadoActual = Estado.COMILLA_CIERRE; // Pasa a la comilla ciere
                    } else {
                        return false;
                    }
                    break;

                case COMILLA_CIERRE:
                    if (esFinalizacion(c)) {
                        estadoActual = Estado.FINALIZACION; // Finaliza correctamente
                    } else {
                        return false;
                    }
                    break;

                case OPERACION:
                    if (esDigito(c)) {
                        estadoActual = Estado.VALOR; // Vuelve al estado de valor
                    } else if (esLetra(c)) {
                        estadoActual = Estado.DECLARACION; // Vuelve a declaración
                    } else if (esSimboloVariable(c)) {
                        estadoActual = Estado.VARIABLE; // Si empieza con $, pasa al estado VARIABLE
                    } else {
                        return false;
                    }
                    break;

                case FINALIZACION:
                    return false;
            }
        }

        // Verificar si termina en un estado de finalización válido
        return estadoActual == Estado.FINALIZACION;
    }
}
