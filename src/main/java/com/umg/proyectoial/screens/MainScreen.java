/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.umg.proyectoial.screens;

import Services.DatabaseConnection;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author keila
 */
public class MainScreen extends javax.swing.JPanel {

    /**
     * Creates new form MainScreen2
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_validar = new javax.swing.JButton();
        txt_codigo = new java.awt.TextArea();
        lbl = new java.awt.Label();
        lblConfirmacion = new javax.swing.JLabel();

        btn_validar.setText("Validar");
        btn_validar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_validarActionPerformed(evt);
            }
        });

        lbl.setText("Ingresar texto");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(40, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btn_validar)
                                .addGap(175, 175, 175))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblConfirmacion)
                                .addGap(65, 65, 65))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addComponent(txt_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblConfirmacion)
                .addGap(2, 2, 2)
                .addComponent(btn_validar)
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_validarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_validarActionPerformed
        String query = " select lexeme,type from symbolsTable ";
        try {
            ResultSet rs = DatabaseConnection.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // Crear una lista para almacenar las filas (cada fila será un arreglo)
            ArrayList<Object[]> rows = new ArrayList<>();

            // Iterar sobre cada fila
            while (rs.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                rows.add(row);
            }
            // Convertir la lista a un arreglo (si es necesario)
            Object[][] data = rows.toArray(new Object[rows.size()][]);
            
            String texto = txt_codigo.getText();
            texto = texto.trim();
            texto = texto.replaceAll("\\s", "");
            char[] caracteres= texto.toCharArray();
            
            boolean isValido = false; 
           int i = 0;
            
            while(i < caracteres.length){
                isValido = false;
                
                for (Object[] row : data) {
                    String caracter = Character.toString(caracteres[i]);
                    String validar = String.valueOf(row[0]);
                    
                   if(caracter.equals(validar)){
                       isValido = true;
                       break;
                   }
                }
                
                if(isValido == false) {
                    break;
                }
                i++;
            }
            
            if(isValido == false) {
                lblConfirmacion.setText("Sintaxis incorrecta: Carácter no aceptado");
                lblConfirmacion.setForeground(Color.RED);
            }else{
                String[] cadenas = texto.split("(?<=;)");
                for (String cadena : cadenas) {
                    isValido = false;
                    isValido = validarCadena(cadena);  
                   
                    if(isValido == false){
                        break;
                    }
                }
                
                if(isValido){
                    lblConfirmacion.setText("Sintaxis Correcta!!");
                    lblConfirmacion.setForeground(Color.GREEN);
                }else{
                    lblConfirmacion.setText("Sintaxis incorrecta: Cadena incorrecta");
                    lblConfirmacion.setForeground(Color.RED);
                } 
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }//GEN-LAST:event_btn_validarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_validar;
    private java.awt.Label lbl;
    private javax.swing.JLabel lblConfirmacion;
    private java.awt.TextArea txt_codigo;
    // End of variables declaration//GEN-END:variables

        public static boolean esLetra(char c) {
        return Character.isLetter(c);
    }

    // Función para verificar si es un dígito [0-9]
    public static boolean esDigito(char c) {
        return Character.isDigit(c);
    }

    // Función para verificar si es una operación [+ - * /]
    public static boolean esOperacion(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }

    // Función para verificar si es un símbolo de asignación '='
    public static boolean esAsignacion(char c) {
        return c == '=';
    }

    // Función para verificar si es un símbolo de finalización ';'
    public static boolean esFinalizacion(char c) {
        return c == ';';
    }
    
    // Función para verificar si es una comilla doble "
    public static boolean esComillaDoble(char c) {
        return c == '"';
    }

    // Función para verificar si es el símbolo de variable $
    public static boolean esSimboloVariable(char c) {
        return c == '$';
    }
    
    enum Estado {INICIAL, VARIABLE, DECLARACION, OPERACION,ASIGNACION, VALOR, FINALIZACION, COMILLAS, VALOR_LITERAL, COMILLA_CIERRE}
    
    public static boolean validarCadena(String cadena) {
        Estado estadoActual = Estado.INICIAL;

        for (int i = 0; i < cadena.length(); i++) {
            char c = cadena.charAt(i);

            switch (estadoActual) {
                case INICIAL:
                    if (esSimboloVariable(c)) {
                        estadoActual = Estado.VARIABLE; // Si empieza con $, pasa al estado VARIABLE
                    } else {
                        return false; // Si no empieza con $, no es válido
                    }
                    break;

                case VARIABLE:
                    if (esLetra(c)) {
                        estadoActual = Estado.DECLARACION; // Después de $, se espera una letra
                    }else {
                        return false;
                    }
                    break;

                case DECLARACION:
                    if (esLetra(c)) {
                        estadoActual = Estado.DECLARACION; // Sigue en declaración
                    }else if (esDigito(c)){
                        estadoActual = Estado.DECLARACION; // Sigue en declaración
                    } else if (esAsignacion(c)) {
                        estadoActual = Estado.ASIGNACION; // Pasa a estado de asignación
                    } else {
                        return false;
                    }
                    break;

                case ASIGNACION:
                    if (esDigito(c)) {
                        estadoActual = Estado.VALOR; // Pasa a estado de valor
                    }else if(esComillaDoble(c)){
                        estadoActual = Estado.VALOR_LITERAL; // Pasa a estado de valor
                    } else {
                        return false;
                    }
                    break;

                case VALOR:
                    if (esDigito(c)) {
                        estadoActual = Estado.VALOR; // Sigue en valor
                    } else if (esOperacion(c)) {
                        estadoActual = Estado.OPERACION; // Pasa a operación
                    } else if (esFinalizacion(c)) {
                        estadoActual = Estado.FINALIZACION; // Finaliza correctamente
                    } else {
                        return false;
                    }
                    break;
                    
                 case VALOR_LITERAL:
                    if (esDigito(c)) {
                        estadoActual = Estado.VALOR_LITERAL; // Sigue en valor
                    }   else if (esLetra(c)) {
                        estadoActual = Estado.VALOR_LITERAL; // Sigue en declaración
                    } else if(esComillaDoble(c)){
                        estadoActual = Estado.COMILLA_CIERRE; // Pasa a la comilla ciere
                    }else {
                        return false;
                    }
                    break;
                    
                case COMILLA_CIERRE:
                    if (esFinalizacion(c)) {
                        estadoActual = Estado.FINALIZACION; // Finaliza correctamente
                    } else {
                        return false;
                    }
                break;
                    
                case OPERACION:
                    if (esDigito(c)) {
                        estadoActual = Estado.VALOR; // Vuelve al estado de valor
                    } else if (esLetra(c)) {
                        estadoActual = Estado.DECLARACION; // Vuelve a declaración
                    } else {
                        return false;
                    }
                    break;

                case FINALIZACION:
                    return false; 
            }
        }

        // Verificar si termina en un estado de finalización válido
        return estadoActual == Estado.FINALIZACION;
    }
}
